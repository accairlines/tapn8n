version: "3.8"

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - /var/log/docker/web:/var/log/nginx/
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./.htpasswd:/etc/nginx/.htpasswd
    ports:
      - 443:443
      - 8082:8082
      - 8083:8083
    restart: always
    container_name: web
    depends_on:
      - n8n
      - llama
      - predictor
      - qdrant
      - pptgeneration
    networks:
      - web_network
      - n8n_network
      - llama_network
      - predictor_network
      - qdrant_network

  n8n:
    image: n8nio/n8n:latest
    pull_policy: always
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - GENERIC_TIMEZONE=Europe/Lisbon
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=hubtmadmin
      - N8N_BASIC_AUTH_PASSWORD=HubTM2023-12n8n
      - N8N_HOST=hubtmn8n.accairlines.com
      - WEBHOOK_TUNNEL_URL=http://hubtmn8n.accairlines.com:5678
      - N8N_ENABLE_NODE_AUTOMATICALLY=true
      - N8N_COMMUNITY_NODES_ENABLED=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - n8n_network

  llama:
    image: ollama/ollama:latest
    pull_policy: always
    container_name: llama
    restart: always
    volumes:
      - llama_data:/root/.ollama
    networks:
      - llama_network
    expose:
      - "11434:11434"
         
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: always
    volumes:
      - ./storage/qdrant:/qdrant/storage
    networks:
      - qdrant_network
    expose:
      - "6333:6333"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
         
  trainer:
    build: ./AETPrediction/trainer
    volumes:
      - /var/data:/app/data
      - /var/log/docker/trainer:/app/logs
      - /var/models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - AET_DATA_PATH=/app/data
      - AET_LOG_PATH=/app/logs
      - AET_MODEL_PATH=/app/models
    networks:
      - trainer_network
    container_name: trainer
    
  predictor:
    build: ./AETPrediction/predictor
    ports:
      - "8000:8000"
    volumes:
      - /var/log/docker/predictor:/app/logs
      - /var/models:/app/models
    environment:
      - PYTHONUNBUFFERED=1
      - AET_MODEL_PATH=/app/models/model.pkl
    depends_on:
      - trainer
    networks:
      - predictor_network
    container_name: predictor
    restart: always 

  pptgeneration:
    build:
      context: ./PPTGeneration/services/pptgeneration
      dockerfile: Dockerfile
    container_name: pptgeneration
    depends_on:
      - llama
      - qdrant
    env_file:
      - ./PPTGeneration/.env
    volumes:
      - /var/data/emails:/data/outlook:ro
    expose:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8001/healthz"]
      interval: 15s
      timeout: 5s
      retries: 20
    networks:
      - qdrant_network
      - llama_network 
      - pptgeneration_network

networks:
  web_network:
    driver: bridge
  n8n_network:
    driver: bridge
  llama_network:
    driver: bridge
  qdrant_network:
    driver: bridge
  trainer_network:
    driver: bridge
  predictor_network:
    driver: bridge
  pptgeneration_network:
    driver: bridge

volumes:
  n8n_data:
    driver: local
  llama_data:
    driver: local
